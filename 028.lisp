(defun generate-corners(index)
  (let ((lst nil) (decval (* 2 index)) (maxcorner (* (+ index (+ index 1)) (+ index (+ index 1)))))
    (if (= index 0)
      (list 1)
      (progn
        (push maxcorner lst)
        (push (- (first lst) decval) lst)
        (push (- (first lst) decval) lst)
        (push (- (first lst) decval) lst)
        lst))))
(defun generate-all-corners (dimension)
  (let ((lst (generate-corners 0)))
    (do ((i 1 (+ 1 i)))
      ((= (first lst) (* dimension dimension)) lst)
      (setf lst (append (reverse (generate-corners i)) lst)))))
(defun euler-28 ()
  (apply #'+ (generate-all-corners 1001)))
