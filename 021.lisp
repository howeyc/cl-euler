#!/usr/local/bin/sbcl --script
(defun proper-divisors (limit)
 (let ((lst nil))
  (do ((i 1 (+ 1 i)))
   ((>= i limit) lst)
   (if (zerop (mod limit i))
    (push i lst)))))
(defun sum-of-proper-divisors (num)
 (apply #'+ (proper-divisors num)))
(defun list-of-divisor-sums (limit)
 (let ((lst (list 0)))
  (do ((i 1 (+ 1 i)))
   ((> i limit) (reverse lst))
    (push (sum-of-proper-divisors i) lst))))
(defun amicable-number (divlst num)
 (if (and
      (< (nth num divlst) (length divlst))
      (not (eql num (nth num divlst)))          ; Cannot index itself, must be pair
      (eql num (nth (nth num divlst) divlst)))
  t))
(defun list-of-amicable-numbers (divlst)
 (let ((lst nil))
  (do ((i 1 (+ 1 i)))
   ((> i (- (length divlst) 1)) lst)
   (if (amicable-number divlst i)
    (push i lst)))))
(defun euler ()
 (apply #'+ (list-of-amicable-numbers (list-of-divisor-sums 10000))))
(defun output-to-screen (x)
  (write-line x))
(output-to-screen (format nil "~A" (euler)))
