#!/usr/local/bin/sbcl --script
(defun primep (num)
  (do ((div 2 (+ div 1)))
    ((> div (sqrt num)) t)
    (if (eql (mod num div) 0) (return nil))))
(defun string-to-number-list (str)
 (let ((lst nil))
  (do ((i 0 (+ 1 i)))
   ((>= i (length str)) (reverse lst))
    (push (parse-integer str :start i :end (+ 1 i)) lst))))
(defun number-to-number-list (num)
 (string-to-number-list (format nil "~A" num)))
(defun make-number-list (limit)
 (let ((lst nil))
  (do ((i 1 (+ 1 i)))
   ((> i limit) lst)
   (push i lst))))
(defun pandigitalp (num)
 (let ((lst (number-to-number-list num)))
  (dolist (digit (make-number-list (length lst)) t)
  (if (null (find digit lst))
   (return nil)))))
(defun euler ()
 (let ((panprimes nil))
  (do ((i 0 (+ i 1)))
   ((> i 10000000) (apply #'max panprimes))
   (if (and 
        (pandigitalp i)
        (primep i))
    (push i panprimes)))))
(defun output-to-screen (x)
  (write-line x))
(output-to-screen (format nil "~A" (euler)))
