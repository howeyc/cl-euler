#!/usr/local/bin/sbcl --script
(defun proper-divisors (num)
 (let ((lst (list 1)) (limit num))
  (do ((i 2 (+ 1 i)))
   ((>= i limit) lst)
   (if (zerop (mod num i))
    (progn
    (pushnew i lst)
    (pushnew (/ num i) lst)
    (setf limit (/ num i)))))))
(defun sum-of-proper-divisors (num)
 (apply #'+ (proper-divisors num)))
(defun abundant-number (num)
  (if (> (sum-of-proper-divisors num) num)
    t))
(defun list-of-abundant-numbers (limit)
 (let ((lst nil))
  (do ((i 1 (+ 1 i)))
   ((> i limit) lst)
   (if (abundant-number i)
    (push i lst)))))
(defun array-sum-of-abundant-numbers (abundant-numbers-list limit)
  (let ((arr (make-array (+ 1 limit))))
   (progn
    (loop named outer for outer-num in abundant-numbers-list do
          (loop named inner for inner-num in abundant-numbers-list do
                (if (<= (+ outer-num inner-num) limit)
                  (setf (aref arr (+ outer-num inner-num)) 1))))
    arr)))
(defun sum-of-non-abundant (arr limit)
 (let ((result 0))
  (do ((i 0 (+ 1 i)))
   ((> i limit) result)
   (if (zerop (aref arr i))
    (setf result (+ result i))))))
(defun euler ()
 (sum-of-non-abundant (array-sum-of-abundant-numbers (reverse (list-of-abundant-numbers 28124)) 28124) 28124))
(defun output-to-screen (x)
  (write-line x))
(output-to-screen (format nil "~A" (euler)))
