#!/usr/local/bin/sbcl --script
(defun string-to-number-list (str)
 (let ((lst nil))
  (do ((i 0 (+ 1 i)))
   ((>= i (length str)) lst)
    (push (parse-integer str :start i :end (+ 1 i)) lst))))
(defun number-to-number-list (num)
 (string-to-number-list (format nil "~A" num)))
(defun to-this-expt (exponent)
  (lambda (num)
    (expt num exponent)))
(defun make-number-list (limit)
 (let ((lst nil))
  (do ((i 1 (+ 1 i)))
   ((> i limit) lst)
   (push i lst))))
(defun factorial (num)
 (apply #'* (make-number-list num)))
(defun sum-of-digits-factorial (num)
 (apply #'+ (mapcar #'factorial (number-to-number-list num))))
(defun sum-of-digits-factorial-eql-num (num)
 (eql num (sum-of-digits-factorial num)))
(defun list-of-numbers-eql-sum-factorial (limit)
 (let ((lst nil))
  (do ((i 3 (+ 1 i)))
   ((>= i limit) lst)
   (if (sum-of-digits-factorial-eql-num i)
    (push i lst)))))
(defun euler ()
 (apply #'+ (list-of-numbers-eql-sum-factorial 100000)))
(defun output-to-screen (x)
  (write-line x))
(output-to-screen (format nil "~A" (euler)))
