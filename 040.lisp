#!/usr/local/bin/sbcl --script
(defun string-to-number-list (str)
 (let ((lst nil))
  (do ((i 0 (+ 1 i)))
   ((>= i (length str)) (reverse lst))
    (push (parse-integer str :start i :end (+ 1 i)) lst))))
(defun number-to-number-list (num)
 (string-to-number-list (format nil "~A" num)))
(defun list-to-number (lst)
 (let ((result 0))
 (do ((i (- (length lst) 1) (- i 1)) (j 0 (+ j 1)))
  ((eql j (length lst)) result)
  (setf result (+ result (* (expt 10 i) (nth j lst)))))))
(defun euler ()
 (let ((digit 1) (numlst nil) (curlength 0) (result 1))
  (do ((i 0 (+ i 1)))
   ((> curlength 1000000) result)
   (setf numlst (number-to-number-list i))
   (if (> (+ curlength (length numlst)) digit)
    (progn
    (setf result (* result (nth (- digit curlength) numlst)))
    (setf digit (* digit 10))))
   (setf curlength (+ curlength (length numlst))))))
(defun output-to-screen (x)
  (write-line x))
(output-to-screen (format nil "~A" (euler)))
