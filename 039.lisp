#!/usr/local/bin/sbcl --script
(defun pythagoreanp (a b c)
 (eql (+ (* a a) (* b b)) (* c c)))
(defun add-to-limit (a b c limit)
 (eql (+ a b c) limit))
(defun possible-solutions (perimeter)
 (let ((lst nil))
  (do ((a 1 (+ 1 a)))
   ((> a perimeter) lst)
  (do ((b (- perimeter a) (- b 1)))
   ((< b a) lst)
   (if (pythagoreanp a b (- perimeter a b))
    (push (list a b (- perimeter a b)) lst))))))
(defun euler ()
 (let ((val 0) (curmax 0) (curnum 0))
  (do ((i 3 (+ i 1)))
   ((> i 1000) curnum)
   (setf val (length (possible-solutions i)))
   (if (> val curmax)
    (progn
     (setf curmax val)
     (setf curnum i))))))
(defun output-to-screen (x)
  (write-line x))
(output-to-screen (format nil "~a" (euler)))
